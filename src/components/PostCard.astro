---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import { Image } from 'astro:assets';

interface Props {
  post: CollectionEntry<'blog'>;
  featured?: boolean;
}

const { post, featured = false } = Astro.props;
const displayImage = post.data.cover || post.data.heroImage;
const postSlug = post.slug || post.id;
---

<article class={`group ${featured ? 'md:col-span-2 lg:col-span-3' : ''}`}>
  <a href={`/blog/${postSlug}/`} class="block">
    <div class={`bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden ${featured ? 'md:flex' : ''}`}>
      {displayImage && (
        <div class={`relative overflow-hidden ${featured ? 'md:w-1/2' : ''}`}>
          <Image 
            class={`w-full object-cover group-hover:scale-105 transition-transform duration-300 ${featured ? 'h-full' : 'h-48'}`}
            width={featured ? 800 : 400} 
            height={featured ? 400 : 200} 
            src={displayImage} 
            alt={`封面圖片：${post.data.title}`}
            loading="lazy"
            decoding="async"
          />
          {post.data.category && (
            <span class="absolute top-4 left-4 bg-blue-600 text-white px-3 py-1 rounded-full text-sm font-medium">
              {post.data.category}
            </span>
          )}
        </div>
      )}
      <div class={`p-6 ${featured ? 'md:w-1/2' : ''}`}>
        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
          <FormattedDate date={post.data.pubDate} />
          <span class="mx-2">·</span>
          <span>{post.data.author || 'Anonymous'}</span>
        </div>
        
        <h2 class={`font-bold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors ${featured ? 'text-2xl md:text-3xl' : 'text-xl'}`}>
          {post.data.title}
        </h2>
        
        <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
          {post.data.excerpt || post.data.description}
        </p>
        
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.data.tags.slice(0, 3).map((tag) => (
              <span class="text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded">
                #{tag}
              </span>
            ))}
            {post.data.tags.length > 3 && (
              <span class="text-xs text-gray-500 dark:text-gray-400">
                +{post.data.tags.length - 3} more
              </span>
            )}
          </div>
        )}
      </div>
    </div>
  </a>
</article>